<?xml version="1.0"?>

<!--
Copyright (c) 2009-2011 Chris Marrin (chris@marrin.com)
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this 
      list of conditions and the following disclaimer.

    - Redistributions in binary form must reproduce the above copyright notice, 
      this list of conditions and the following disclaimer in the documentation 
      and/or other materials provided with the distribution.

    - Neither the name of Video Monkey nor the names of its contributors may be 
      used to endorse or promote products derived from this software without 
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
DAMAGE.
-->

<!--

This file describes the actions to be taken when the VideoMonkey GUI is manipulated. There are two main purposes: setting information that will be displayed in the Info Panel for the output file, and constructing a recipe for the encoding. JavaScript functions here are also provided to parse the output of the various encoding tools and pass back progress bar information.

For each input file, information about it (size, bitrate, frame rate, etc.) is made available. When any change is made to the GUI (selecting a menu item, sliding a slider, checking a box, etc.) this file performs the actions shown below for each file in the list.

File Syntax
===========

The Command file contains an outer <videomonkey> element with one of each children:

<default_device> - parameters used by any device when not overridden, with children:
    <quality> - set of stops for quality slider, with children:
        <quality_stop> - one quality stop, with attributes:
            title - the title of the tick mark
    <performance> - values for performance menu, with children:
        <performance_item> - one item in menu, with attributes and children:
            title - title of this item in menu
            <param>, <command>, <script> - see below
    <param>, <command>, <script> - see below
         
<devices> - List of devices in device menu, with children:
    <device_group> - A grouping of devices. Each groups has a title and groups are separated by a line, 
                     with attributes and children:
        title - title for this group
        <common_device> - features common to all devices in this group, with same children as <default_device>
        <device> - device in this group, with same children as <default_device> and additional attributes and children:
            title - title for this device
            icon - name of the icon image to use for this device
            enabled - whether or not this device is enabled in the device list (true | false)
            <checkbox> - this describes a checkbox, with attributes and children:
                which - which checkbox (0-n)
                title - title on the checkbox
                enabled - whether or not this checkbox is enabled (true | false)
                <checked_item> - parameters used when this checkbox is checked, with children:
                    <param>, <command>, <script> - see below
                <unchecked_item> - parameters used when this checkbox is not checked, with children:
                    <param>, <command>, <script> - see below
            <menu> - this describes a menu, with children:
                which - which menu (0-n)
                title - title on the menu
                enabled - whether or not this menu is enabled (true | false)
                <menu_item> - one entry in the menu, with attributes and children:
                    title - title of this menu item
                    <param>, <command>, <script> - see below
                <radio_group> - encloses a group of menu items to treat as radio buttons
                    <menu_item> - same as above
                <checkbox> - menu item that can be checked or unchecked
                    <checked_item> - same as above
                    <unchecked_item> - same as above
                <submenu>
                    title - title of this submenu
                    <menu_item> - same as above
                    <param>, <command>, <script> - see below
                <separator> - separation line between items
            <param>, <command>, <script> - see below

<script> element
================

Wherever a <script> element is allowed, there can be 0 or more. All scripts are concatenated and executed as one. Scripts have access to the normal JavaScript objects (Object, String, Array, etc.). In addition, there is a log() function which takes 0 or more parameters, each of which is converted to a string, concatenated and output to the console. After all strings of a log() function are printed, a newline is printed. Log entries are prefixed for identification. A 'params' Object is also provided, with properties set as shown below.

<param> element
===============

Wherever a <param> element is allowed, there can be 0 or more. Each element adds a property to the 'params' Object whose property name is obtained from the 'id' attribute of the <params> element and whose property value is obtained from the 'value' attribute.

<command> element
=================

Wherever a <command> element is allowed, there can be 0 or more. Commands are just like params except that the property value is the contents of the element, rather than a 'value' attribute. All newline characters are stripped from the content string, as are any leading or trailing whitespace characters.

<performance> element
=================

The <performance> element has 0 or more <performance_item> elements whose 'title' attributes are presented to the user in the 'Encoding speed:' menu. Each <performance_item> can contain <script>, <param> and <command> elements that are executed when that item is selected.  

<quality> element
=================

The <quality> element has 0 or more <quality_stop> elements whose 'title' attributes are presented to the user as the tick marks of the 'Quality' slider. Each <quality_stop> can contain <script>, <param> and <command> elements that are executed when the slider is closer to that tick mark than any other.  

<checkbox> element
=================

The <checkbox> element's 'title' attribute is presented to the user as the checkbox indicated by the 'which' attribute (see below). This element has 0 or more <checked_item> and <unchecked_item> elements whose <script>, <param> and <command> elements are executed when the checkbox is checked or unchecked, as appropriate. The checkbox element can also appear inside a <menu> element, where it is used as a check menu item. In this case the 'which' attribute is ignored.

<menu> element
=================

The <menu> element's 'title' attribute is presented to the user as the menu indicated by the 'which' attribute (see below). This element has 0 or more <menu_item> elements whose <script>, <param> and <command> elements are executed when that menu item is selected. In some cases the menu is presented as a set of radio buttons. In this case, each menu_item is a radio button and when selected, it's <script>, <param> and <command> elements are executed. A <menu> element can inside another menu element, making it a submenu. In this case the 'which' attribute is ignored.

<radio_group>
=============
The <radio_group> element can appear inside a <menu> element (top level or submenu). Inside the <radio_group> can appear 0 or more <menu_item> elements, each of which becomes on radio item of the group. When a menu_item is selected, its <script>, <param> and <command> elements are executed.

GUI layout
=================

The layout of GUI is determined by the 'which' attributes of the <menu> and <checkbox> elements. There are 4 layouts:

    a) 0 to 3 checkboxes and no menus
    b) 0 to 2 checkboxes, an optional set of radio buttons with 2 buttons, and an optional pulldown menu
    c) A custom layout for controlling all encoding paramerters
    d) A layout designed for DVD authoring (currently not implemented).

Radio buttons for layout (a) and (b) are selected by setting the 'which' attribute to 0, and a pulldown menu is specified with a 'which' attribute of 1. If a menu with a 'which' attribute of 0 or 1 is set, layout (b) is selected. Otherwise layout (a) is selected. In either layout, checkboxes are laid out right to left, e.g., a checkbox with a 'which' attribute of 0 is the right-most in both layouts.

Execution
=========

The workhorse elements are <param>, <command> and <script>. These contain the instructions which ultimately lead to a recipe to use for the encoding task. Params and commands are added to the JavaScript 'params' object in one pass, as long as they are contained in elements which are selected. And then the scripts are executed in a separate pass, as long as their elements are selected. So even later defined params and commands are accessible to earlier scripts. Scripts are executed according to the elements which contain them in the following order:

    1) <default_device>
    2) selected <performance_item> from <default_device>
    3) <common_device> for selected <device>
    4) selected <performance_item> from <common_device> for selected <device>
    5) selected <device>
    6) selected <performance_item> from selected <device>
    7) <checked_item> or <unchecked_item> entry from each <checkbox> in selected <device>
    8) selected <menu_item> entry from each <menu> in selected <device>
    
The result of this script execution is the output params (see below) being set for display in the Output Info Panel, and a string in 'params.recipe' which is the recipe to be executed. See below for recipe syntax. These scripts are executed when any UI control is changed. This includes the slider, which executes the scripts for each move. The script is executed in turn for each file selected for encoding. This pass of script execution is to fill in the file list entries. When encoding is started, the scripts are executed again for the currently encoding file and the recipe is used to start the encoding. Once encoding is finished, the scripts are executed for the next file, and so on.

Javascript Params
=================

Each time scripts execute, a number of parameters are preloaded into the 'params' property. These are:

Param Name              Value
==========              =====

app_resource_path           Path to application resources

input_file                  Current input file path
output_file                 Current output file path
tmp_audio_file              Path to a temp file to which audio can be saved
input_format                Container format of input file
input_duration              Duration of input video
input_video_width           Width, in pixels, of the input file
input_video_height          Height, in pixels, of the input file
input_frame_rate            Frame rate, in fps, of the input file
input_video_bitrate         Bitrate of the video in the input file
input_video_aspect          Video aspect ratio (may be different from width/height for non-square pixels)
input_video_codec           Name of the video codec of the input file
input_video_index           Video stream index in the file (used by the -map attr)
input_audio_index           Audio stream index in the file (used by the -map attr)
audio_offset                Offset to apply to audio, in seconds.
video_offset                Offset to apply to video, in seconds.
has_audio                   "true" if the input file contains an audio track

duration                    Duration of video, in seconds

quality                     The current setting of the quality slider (0-1 between tick marks)
quality_stop                Which tick mark is currently to the left of the slider (0 to #ticks-1)
title                       Title of the currently selected device

limit_output_params         "true" if output params should be limited to be no larger than input

num_cpus                    Number of CPUs to use during encoding

After executing all the scripts (see Execution) the system expects the following properties to be set in the 'params' property:

Param Name              Value
==========              =====

recipe                      Recipe to use for the current encoding
output_video_width          Width, in pixels, of the output file
output_video_height         Height, in pixels, of the output file
output_video_bitrate        Approximate bitrate of the output video
output_format_name          Displayed format of the container
output_video_codec_name     Displayed video codec
output_video_profile_name   Displayed profile of the video
output_video_level_name     Displayed level of this video
output_video_frame_rate     Framerate of the output file
output_video_aspect_ratio   Aspect ratio of the output file

output_audio_codec_name     Displayed audio codec
output_audio_bitrate        Audio bitrate
output_audio_sample_rate    Sample rate of audio
output_audio_channels       Number of channels of audio
output_audio_quality        A string indicating the audio quality of the output file (usually "low", "medium" or "high")

processResponse             Global function that handles lines of stderr output from the executing commands (Do not change)
processResponseCallbacks    An Array of functions called by processResponse()
processResponseProgress     The current progress of the currently executing command, from 0 to 1
processResponseMessage      String to be output to the error console.

The following are generated during script execution and are used in the generation of the recipe:

Param Name              Value
==========              =====

ffmpeg_video_aspect_x       numerator of the -aspect param
ffmpeg_video_aspect_y       denominator of the -aspect param

ffmpeg_x264_preset          x264 preset param, including -vpre (if output codec is x264, empty otherwise)
ffmpeg_x264_pass1_preset    x264 preset param for pass1, including -vpre (if output codec is x264 and 2 pass, empty otherwise)

ffmpeg_option_target
ffmpeg_option_padleft
ffmpeg_option_padright
ffmpeg_option_padtop
ffmpeg_option_padbottom
ffmpeg_option_vcodec
ffmpeg_option_acodec
ffmpeg_option_pix_fmt
ffmpeg_option_vtag          currently only set to DX50 in AVI
ffmpeg_option_g
ffmpeg_option_maxrate
ffmpeg_option_qmin
ffmpeg_option_bf

apple_tv_format_limit       True if output frame size is limited to 960x540 @ 30hz or 1024x720 @ 24hz (1st gen Apple TV)

The recipe is used for the actual encoding, the others output values are used to update the file entries, and the
processResponse values are used to process stderr responses from the executing command.

processResponse
===============

The default script creates a processResponse function, which should not be changed by specific device scripts. It has
the form:

    function processResponse(command, response)
    
where command is the name of the executing command and response is the complete line that was sent to stderr.

When a response is received, processResponse sends the response to each function in the processResponseCallbacks
Array. Each function in this array has the same form as processResponse. The callback performs any processing
required and then sets 2 param values, processResponseProgress and processResponseMessage. The callback must
return true if the response was processed and false otherwise. If false, the next function in the Array is called.

Recipes 
=======

A recipe is essentially a shell script to be passed to /bin/sh. A param (from the global 'params' object) can be included with a '$' followed by the property name. For instance if there were a 'params.foo' property with the value "very nice", then the recipe "This is a $foo command" would translate to "This is a very nice command". To include a literal '$' simply use two consecutively ('$$'). 

A property name is anything from the character after the '$' to the next whitespace character. Or you can use parantheses around the property name to concatenate with non-whitespace characters. For instance "This is the $(foo)st command" would translate to "This is the very nicest command".

FFMpeg Parameters
=================

Useful URLs:
    http://sites.google.com/site/linuxencoding/x264-ffmpeg-mapping
    http://www.webupd8.org/2009/08/ffmpeg-cheat-sheet-19-best-practices.html
    http://rob.opendot.cl/index.php/useful-stuff/h264-profiles-and-levels/

These parameters are always included and never changed by these scripts:
========================================================================
-pass                       (1 or 2) identifes pass for 2 pass encoding
-threads                    Number of threads used. Always set to $num_cpus
-y                          Overwrite output files (always included)
-i                          Precedes input file
ffmpeg                      ffmpeg command path

DTD
===
<!DOCTYPE videomonkey [
    <!ELEMENT videomonkey    (default_device|devices)*>
    <!ELEMENT script    (#PCDATA)>
    <!ELEMENT param    EMPTY>
        <!ATTLIST param id CDATA "">
        <!ATTLIST param value CDATA "">
    <!ELEMENT default_device    (quality|performance|script|param|command)*>
    <!ELEMENT common_device     (quality|performance|script|param|command)*>
    <!ELEMENT devices    (device_group*)>
    <!ELEMENT command    (#PCDATA)>
        <!ATTLIST command id CDATA "">
    <!ELEMENT quality    (quality_stop*)>
    <!ELEMENT quality_stop  EMPTY>
        <!ATTLIST quality_stop title CDATA "">
    <!ELEMENT performance    (performance_item*)>
    <!ELEMENT performance_item    (script|param|command)*>
        <!ATTLIST performance_item title CDATA "">
    <!ELEMENT device_group    (common_device?,device*)>
        <!ATTLIST device_group title CDATA "">
    <!ELEMENT device    (quality|performance|script|param|command|checkbox|menu)*>
        <!ATTLIST device title CDATA "">
        <!ATTLIST device icon CDATA "">
        <!ATTLIST device enabled CDATA "">
    <!ELEMENT checkbox    (checked_item|unchecked_item)*>
        <!ATTLIST checkbox which CDATA "">
        <!ATTLIST checkbox title CDATA "">
        <!ATTLIST checkbox enabled CDATA "">
    <!ELEMENT checked_item    (script|param|command)*>
    <!ELEMENT unchecked_item    (script|param|command)*>
    <!ELEMENT menu    (menu_item|radio_group|checkbox|menu|separator*)>
        <!ATTLIST menu which CDATA "">
        <!ATTLIST menu title CDATA "">
        <!ATTLIST menu enabled CDATA "">
    <!ELEMENT menu_item    (script|param|command)*>
        <!ATTLIST menu_item title CDATA "">
    <!ELEMENT radio_group   (menu_item*)>
        <!ATTLIST radio_group title CDATA "">
    <!ELEMENT separator    EMPTY>
]>
-->

<videomonkey>
    <default_device>
        <!-- Init params used -->
        <param id="ffmpeg_option_target" value="" />
        <param id="ffmpeg_option_padleft" value="" />
        <param id="ffmpeg_option_padright" value="" />
        <param id="ffmpeg_option_padtop" value="" />
        <param id="ffmpeg_option_padbottom" value="" />
        <param id="ffmpeg_option_pix_fmt" value="" />
        <param id="ffmpeg_option_vtag" value="" />
        <param id="ffmpeg_option_g" value="" />
        <param id="ffmpeg_option_maxrate" value="" />
        <param id="ffmpeg_option_qmin" value="" />
        <param id="ffmpeg_option_bf" value="" />
        <param id="output_video_bitrate" value="0" />
        <param id="output_video_profile_name" value="" />
        <param id="output_video_level_name" value="" />
        <param id="ffmpeg_vpre_pass1" value="" />
        <param id="ffmpeg_vpre" value="" />
        <param id="ffmpeg_vpre_profile" value="" />
        <param id="ffmpeg_video_aspect_x" value="0" />
        <param id="ffmpeg_video_aspect_y" value="0" />
        <param id="output_audio_sample_rate" value="0" />
        
        <!-- Advanced menu items -->
        <param id="advanced_audio_codec" value="MP3,AAC,WMA,AC3,MP2,PCM" />
        <param id="advanced_audio_channels" value="1,2" />
        <param id="advanced_audio_bitrate" value="16000,32000,128000,160000,192000,320000,1400000" />
        <param id="advanced_audio_sample_rate" value="8000,11025,16000,22050,32000,44056,44100,47250,48000,88200,96000" />
        <param id="advanced_video_codec" value="H.264,MPEG-4,WMV,FLV,MPEG-1,MPEG-2,Digital Video" />
        <param id="advanced_video_profile" value="baseline,main" />

        <!-- Apps -->
        <command id="ffmpeg">
            "$(app_resource_path)/bin/ffmpeg"
        </command>
        
        <!-- Default params (sometimes overridden) -->
        <param id="output_video_profile_name" value="baseline" />

        <!-- Composite options -->
        <command id="ffmpeg_single_pass_options">
            $ffmpeg_vpre $ffmpeg_vpre_profile
        </command>
        <command id="ffmpeg_pass1_options">
            -pass 1 $ffmpeg_vpre_pass1 $ffmpeg_vpre_profile
        </command>
        <command id="ffmpeg_pass2_options">
            -pass 2 $ffmpeg_vpre $ffmpeg_vpre_profile
        </command>
        
        <!-- Raw encoding commands -->
        <command id="ffmpeg_normal_av">
            $ffmpeg -threads $num_cpus -y -i "$input_file"
        </command>
        <command id="ffmpeg_normal_av_offset">
            $ffmpeg -threads $num_cpus -y -itsoffset $video_offset -i "$input_file"  
                -itsoffset $audio_offset -i "$input_file" -map 0:$(input_video_index) -map 1:$(input_audio_index)
        </command>
        <command id="ffmpeg_normal_v">
            $ffmpeg -threads $num_cpus -y -i "$input_file"
        </command>
        <command id="yuv_to_ffmpeg_av">
            $ffmpeg -threads $num_cpus -y -i - -i "$tmp_audio_file"
        </command>
        <command id="yuv_to_ffmpeg_av_offset">
            $ffmpeg -threads $num_cpus -y -itsoffset $video_offset -i - 
                -itsoffset $audio_offset -i "$tmp_audio_file" -map 0:$(input_video_index) -map 1:$(input_audio_index)
        </command>
        <command id="yuv_to_ffmpeg_v">
            $ffmpeg -threads $num_cpus -y -i -
        </command>
        
        <!-- complete encoding commands -->
        <command id="normal_av_single_pass">
            $ffmpeg_normal_av $ffmpeg_options $ffmpeg_single_pass_options "$output_file"
        </command>
        <command id="normal_av_single_pass_offset">
            $ffmpeg_normal_av_offset $ffmpeg_options $ffmpeg_single_pass_options "$output_file"
        </command>
        <command id="normal_av_pass1">
            $ffmpeg_normal_av $ffmpeg_options $ffmpeg_pass1_options "$output_file"
        </command>
        <command id="normal_av_pass2">
            $ffmpeg_normal_av $ffmpeg_options $ffmpeg_pass2_options "$output_file"
        </command>
        <command id="normal_av_pass2_offset">
            $ffmpeg_normal_av_offset $ffmpeg_options $ffmpeg_pass2_options "$output_file"
        </command>
        <command id="normal_v_single_pass">
            $ffmpeg_normal_v $ffmpeg_options $ffmpeg_single_pass_options "$output_file"
        </command>
        <command id="normal_v_pass1">
            $ffmpeg_normal_v $ffmpeg_options $ffmpeg_pass1_options "$output_file"
        </command>
        <command id="normal_v_pass2">
            $ffmpeg_normal_v $ffmpeg_options $ffmpeg_pass2_options "$output_file"
        </command>
        <script>
            <![CDATA[

            // The first generation Apple TV could not handle 30fps 720p content. If 
            // you wanted 30fps you were limited to 960x540, and if you wanted
            // 1024x768 you were limited to 24fps. This variable captures that
            // information. Here we set it to the empty string. If it is changed
            // to true or false it indicates a first generation Apple TV encode.
            params.apple_tv_format_limit = "";

            /*
             *  Utility functions
             */
            function caseInsensitiveCompare(a,b) { return a.toLowerCase() == b.toLowerCase() }

            function bool(v)
            {
                if (typeof(v) == "number")
                    return v != 0;
                if (typeof(v) == "boolean")
                    return v;
                if (typeof(v) == "string")
                    return v != "false" && v != "";
                return false;
            }
            
            function number(v)
            {
                if (typeof(v) == "number")
                    return v;
                if (typeof(v) == "boolean")
                    return v ? 1 : 0;
                if (typeof(v) == "string")
                    return parseFloat(v);
                return 0;
            }

            function standardizeVideoCodecName(name)
            {
                if (caseInsensitiveCompare(name, "vc-1"))
                    return "wmv3";
                if (caseInsensitiveCompare(name, "avc") || caseInsensitiveCompare(name, "avc1"))
                    return "h.264";
                return name;
            }
            

            /*
             *  Prosessing responses
             */
            function addProcessResponseCallback(f)
            {
                if (!("processResponseCallbacks" in params))
                    params.processResponseCallbacks = [ ];
                params.processResponseCallbacks.push(f);
            }
            
            function processResponse(command, response)
            {
                // Init response values
                params.processResponseProgress = -1;
                params.processResponseMessage = "";
            
                for (var i in params.processResponseCallbacks) {
                    if (params.processResponseCallbacks[i](command, response))
                        return;
                }
            
                // Response not handled, just output it
                params.processResponseMessage = response;
            }

            addProcessResponseCallback(function(command, response)
            {
                // Handle all common responses
                if (command == "ffmpeg") {
                    if (response.match(/^frame=/)) {
                        // This looks like a progress line for ffmpeg
                        var frame = number(response.replace(/^frame=/, ""));
                        var totalFrames = params.duration * params.output_video_frame_rate;
                        params.processResponseProgress = frame / totalFrames;
                        return true;
                    }
                }
                else if (command == "AtomicParsley") {
                    if (response.match(/^ Progress:/)) {
                        // This looks like a progress line for AtomicParsley
                        var array = response.split(">");
                        params.processResponseProgress = number(array[1]) / 100;
                        return true;
                    }
                }

                return false;
            });
            
            
            /*
             *  Generate params.ffmpeg_options
             */
            function addFFMPegParam(param, paramName)
            {
                if (paramName == undefined)
                    paramName = "ffmpeg_option_" + param;

                if (paramName in params && params[paramName] != "")
                    params.ffmpeg_options += "-" + param + " " + params[paramName] + " ";
            }
            
            function setFFMPegOptions()
            {
                var audio_codec_name = params.output_audio_codec_name_override;
                if (audio_codec_name == "")
                    audio_codec_name = params.output_audio_codec_name;

                var audio_channels = params.output_audio_channels_override;
                if (audio_channels == "")
                    audio_channels = params.output_audio_channels;

                var audio_sample_rate = params.output_audio_sample_rate_override;
                if (audio_sample_rate == "")
                    audio_sample_rate = params.output_audio_sample_rate;
                else if (params.output_audio_bitrate_override == "") {
                    // Make sure audio sample rate is sufficient, unless overridden
                    if (audio_sample_rate >= 44100 && params.output_audio_bitrate < 128000)
                        params.output_audio_bitrate = 128000;
                    else if (audio_sample_rate >= 22050 && params.output_audio_bitrate < 32000)
                        params.output_audio_bitrate = 32000;
                    else if (params.output_audio_bitrate < 16000)
                        params.output_audio_bitrate = 16000;
                }

                var audio_bitrate = params.output_audio_bitrate_override;
                if (audio_bitrate == "")
                    audio_bitrate = params.output_audio_bitrate;

                var video_codec_name = params.output_video_codec_name_override;
                if (video_codec_name == "")
                    video_codec_name = params.output_video_codec_name;

                var video_profile_name = params.output_video_profile_name_override;
                if (video_profile_name == "")
                    video_profile_name = params.output_video_profile_name;

                var video_frame_rate = params.output_video_frame_rate_override;
                if (video_frame_rate == "")
                    video_frame_rate = params.output_video_frame_rate;

                var video_width = params.output_video_width_override;
                if (video_width == "")
                    video_width = params.output_video_width;

                var video_height = params.output_video_height_override;
                if (video_height == "")
                    video_height = params.output_video_height;
                
                // set vpre if needed
                if (video_codec_name == "H.264") {
                    params.ffmpeg_vpre_pass1 = "-vpre ffpresets/$ffmpeg_x264_pass1_preset ";
                    params.ffmpeg_vpre = "-vpre ffpresets/$ffmpeg_x264_preset ";
                    params.ffmpeg_vpre_profile = "-vpre ffpresets/libx264-" + video_profile_name + " ";
                }

                params.ffmpeg_options = "";
                
                addFFMPegParam("target")
                params.ffmpeg_options += "-s " + video_width + "x" + video_height + " ";
                
                // If the width, height or aspect ratio are overridden, we need to adjust aspect
                var video_aspect_x = params.ffmpeg_video_aspect_x;
                var video_aspect_y = params.ffmpeg_video_aspect_y;
                
                if (video_aspect_x == 0 || video_aspect_y == 0 || 
                        params.output_video_width_override != "" || params.output_video_height_override != "") {
                    video_aspect_x = video_width;
                    video_aspect_y = video_height;
                }
                
                var video_aspect_ratio = params.output_video_aspect_ratio_override;
                if (video_aspect_ratio != "") {
                    video_aspect_ratio = number(video_aspect_ratio);
                    video_aspect_x = video_aspect_y * video_aspect_ratio;
                }
                
                params.output_video_aspect_ratio = video_aspect_x / video_aspect_y;
                        
                params.ffmpeg_options += "-aspect " + Math.round(video_aspect_x) + ":" + Math.round(video_aspect_y) + " ";
                    
                params.ffmpeg_options += "-r " + video_frame_rate + " ";
                addFFMPegParam("padleft");
                addFFMPegParam("padright");
                addFFMPegParam("padtop");
                addFFMPegParam("padbottom");

                // Set ffmpeg_option_vcodec from output_video_codec_name
                switch(video_codec_name) {
                    case "H.264": params.ffmpeg_option_vcodec = "libx264"; break;
                    case "MPEG-4": params.ffmpeg_option_vcodec = "mpeg4"; break;
                    case "WMV": params.ffmpeg_option_vcodec = "wmv1"; break;
                    case "FLV": params.ffmpeg_option_vcodec = "flv"; break;
                    case "MPEG-1": params.ffmpeg_option_vcodec = "mpeg1video"; break;
                    case "MPEG-2": params.ffmpeg_option_vcodec = "mpeg2video"; break;
                    case "Digital Video": params.ffmpeg_option_vcodec = "dvvideo"; break;
                    default: params.ffmpeg_option_vcodec = "libx264"; break;
                }
                addFFMPegParam("vcodec");
                
                if (params.output_video_bitrate > 0)
                    params.ffmpeg_options += "-b $(output_video_bitrate) ";
                    
                addFFMPegParam("pix_fmt");
                addFFMPegParam("vtag");
                addFFMPegParam("g");
                addFFMPegParam("maxrate");
                addFFMPegParam("qmin");
                addFFMPegParam("bf");
                params.ffmpeg_options += "-async 50 ";
                
                // Set ffmpeg_option_acodec from output_audio_codec_name
                switch(audio_codec_name) {
                    case "MP3": params.ffmpeg_option_acodec = "libmp3lame"; break;
                    case "AAC": params.ffmpeg_option_acodec = "libfaac"; break;
                    case "WMA": params.ffmpeg_option_acodec = "wmav2"; break;
                    case "AC3": params.ffmpeg_option_acodec = "ac3"; break;
                    case "MP2": params.ffmpeg_option_acodec = "mp2"; break;
                    case "PCM": params.ffmpeg_option_acodec = "pcm_s16le"; break;
                    default: params.ffmpeg_option_acodec = "libmp3lame"; break;
                }
                addFFMPegParam("acodec");
                
                if (audio_sample_rate > 0)
                    params.ffmpeg_options += "-ar " + audio_sample_rate + " ";
                    
                params.ffmpeg_options += "-ac " + audio_channels + " -ab " + audio_bitrate + " ";
                addFFMPegParam("f"); // '-f vob' for MPEG-2 encode to program stream
            }


            /*
             *  Setting output params
             */
            // Sets output_audio_bitrate, output_audio_sample_rate, output_audio_channels, output_audio_quality
            function setAudioParams(type)
            {
                switch(type) {
                    case "low":
                        params.output_audio_bitrate =  16000;
                        params.output_audio_sample_rate = 11025;
                        params.output_audio_channels = 1;
                        params.output_audio_quality = "Low";
                        break;
                    case "medium":
                        params.output_audio_bitrate =  32000;
                        params.output_audio_sample_rate = 22050;
                        params.output_audio_channels = 1;
                        params.output_audio_quality = "Medium";
                        break;
                    case "cd":
                        params.output_audio_bitrate = 128000;
                        params.output_audio_sample_rate = 44100;
                        params.output_audio_channels = 2;
                        params.output_audio_quality = "CD";
                        break;
                    case "high":
                        params.output_audio_bitrate = 128000;
                        params.output_audio_sample_rate = 48000;
                        params.output_audio_channels = 2;
                        params.output_audio_quality = "High";
                        break;
                    case "hd":
                        params.output_audio_bitrate = 192000;
                        params.output_audio_sample_rate = 48000;
                        params.output_audio_channels = 2;
                        params.output_audio_quality = "High";
                        break;
                    case "default":
                        setAudioParams((params.quality_stop == 0) ? "low" : (params.quality_stop == 1) ? "medium" : "high");
                        break;

                }
            }
            
            // Sets output_video_frame_rate
            //
            // if allowDegradedRate is true, degrade the frame rate to half rate if quality is low
            function setVideoFrameRate(allowDegradedRate)
            {
                // set the frame rate
                var rateMultiplier = 1;
                if (allowDegradedRate && number(params.quality_stop) == 0 && number(params.quality) < 0.5)
                    rateMultiplier = 0.5;

                params.output_video_frame_rate = params.input_frame_rate * rateMultiplier;
            }
            
            // Sets output_video_bitrate
            function setVideoBitrate(bitrateMin, bitrateMax)
            {
                var bitrate = (bitrateMax - bitrateMin) * number(params.quality) + bitrateMin;
                var limit = (bitrate > params.input_video_bitrate) && bool(params.limit_output_params);
                params.output_video_bitrate = Math.round(limit ? params.input_video_bitrate : bitrate);
            }
            
            // Assumes output_video_frame_rate is set
            // Sets output_video_width, output_video_height
            function setVideoSize(requestedWidth, requestedHeight)
            {
                if (requestedWidth == 0)
                    requestedWidth = params.input_video_width;
                    
                if (requestedHeight == 0)
                    requestedHeight = requestedWidth * params.input_video_height / params.input_video_width;

                // Set output frame size
                var inputWidth = params.input_video_width;
                var inputHeight = params.input_video_height;
                var inputAspect = inputWidth / inputHeight;
                if (Math.abs(inputAspect - params.input_video_aspect) > 0.01) {
                    if (inputAspect < params.input_video_aspect) {
                        // stretch horizontally
                        inputWidth = inputHeight * params.input_video_aspect;
                    }
                    else {
                        // stretch vertically
                        inputHeight = inputWidth / params.input_video_aspect;
                    }
                }
                
                // adjust for limit_output_params
                if (bool(params.limit_output_params)) {
                    if (requestedWidth > inputWidth || requestedHeight > inputHeight) {
                        requestedWidth = inputWidth;
                        requestedHeight = inputHeight;
                    }
                }
                
                // Adjust frame rate and frame size based on format_limits for devices that 
                // are limited to 960x540 for framerates over 24fps (first gen Apple TV)
                if (params.apple_tv_format_limit == "24fps") {
                    if (requestedWidth > 960 || requestedHeight > 540) {
                        if (params.output_video_frame_rate > 24)
                            params.output_video_frame_rate = 24;
                        if (requestedWidth > 1280)
                            requestedWidth = 1280;
                        if (requestedHeight > 1024)
                            requestedHeight = 1024;
                    }
                }
                else if (params.apple_tv_format_limit == "30fps"){
                    if (params.output_video_frame_rate > 30)
                        params.output_video_frame_rate = 30;
                    if (requestedWidth > 960)
                        requestedWidth = 960;
                    if (requestedHeight > 540)
                        requestedHeight = 540;
                }

                // adjust video frame size
                inputAspect = inputWidth / inputHeight;

                var requestedAspect = requestedWidth / requestedHeight;
                
                if (inputAspect > requestedAspect) {
                    // shorten height
                    requestedHeight = requestedWidth / inputAspect;
                }
                else {
                    // shorten width
                    requestedWidth = requestedHeight * inputAspect;
                }
                
                // Make frame size divisible by 16
                requestedWidth = Math.round(requestedWidth / 16) * 16;
                requestedHeight = Math.round(requestedHeight / 16) * 16;
                
                // One more problem. If we are frame size limited then 
                // rounding could have pushed us over that limit.
                // We need to make sure the width and height
                // are below the maximums.
                if (params.apple_tv_format_limit == "24fps") {
                    if (requestedWidth > 1280)
                        requestedWidth -= 16;
                    if (requestedHeight > 1024)
                        requestedHeight -= 16;
                }
                else if (params.apple_tv_format_limit == "30fps") {
                    if (requestedWidth > 960)
                        requestedWidth -= 16;
                    if (requestedHeight > 540)
                        requestedHeight -= 16;
                }
                
                params.output_video_width = requestedWidth;
                params.output_video_height = requestedHeight;
            }
            
            // Create params.recipe
            function setRecipe()
            {
                // Set options here so recipe can pick them up
                setFFMPegOptions();
                
                var recipeType = 
                    (bool(params.has_audio) ? 2 : 0) |
                    (bool(params.is_2_pass) ? 1 : 0);
                                        
                var offset = (number(params.audio_offset) != 0 || number(params.video_offset) != 0) ? "_offset" : "";
                
                switch (recipeType) {
                    case 0: params.recipe = "$normal_v_single_pass"; break;
                    case 1: params.recipe = "$normal_v_pass1 ; $normal_v_pass2"; break
                    case 2: params.recipe = "$normal_av_single_pass" + offset; break;
                    case 3: params.recipe = "$normal_av_pass1 ; $normal_av_pass2" + offset; break;
                }
            }
            
            ]]>
        </script>
        <quality>
            <quality_stop title="Tiny" />
            <quality_stop title="Low" />
            <quality_stop title="Standard" />
            <quality_stop title="High" />
            <quality_stop title="Go Nuts" />
        </quality>
        <performance>
            <performance_item title="Fastest">
                <param id="is_2_pass" value="false" />
                <param id="ffmpeg_x264_preset" value="libx264-ultrafast" />
            </performance_item>
            <performance_item title="Fast">
                <param id="is_2_pass" value="false" />
                <param id="ffmpeg_x264_preset" value="libx264-fast" />
           </performance_item>
            <performance_item title="Normal">
                <param id="is_2_pass" value="false" />
                <param id="ffmpeg_x264_preset" value="libx264-medium" />
            </performance_item>
            <performance_item title="Best (2 pass)">
                <param id="is_2_pass" value="true" />
                <param id="ffmpeg_x264_preset" value="libx264-slow" />
                <param id="ffmpeg_x264_pass1_preset" value="libx264-slow_firstpass" />
            </performance_item>
        </performance>
        <param id="output_video_codec_name" value="H.264" />
        <param id="output_audio_codec_name" value="AAC" />
        <param id="video_suffix" value="mp4" />
    </default_device>
    
    <devices>
        <!--
        
            iTunes Group
            
        -->
        <device_group title="iTunes">
            <common_device>
                <script>
                    <![CDATA[
    
                    // iTunes Formats -
                    //
                    // At this point, we know what 2 quality stops we are between (params.quality_stop 
                    // and params.quality_stop+1) and we know what percentage of the way between the 
                    // two we are (params.quality). We also know which device we have selected 
                    // (params.title), whether we are doing h.264 or mpeg4 (params.h264), and whether 
                    // we want to optimize for TV or iPod (params.for_tv). From this we need to 
                    // compute requestedFrameWidth, requestedFrameHeight, 
                    // params.output_audio_quality and params.output_video_bitrate.
                    
                    // We support a number of standard frame sizes. After adjusting these sizes according to the flags
                    // (h264, forTV), we determine the actual frame size using these as maximum values, taking
                    // into account aspect ratio.
                    
                    params.output_format_name = "MPEG-4";
                    params.output_video_codec_name = bool(params.h264) ? "H.264" : "MPEG-4"
                    params.output_audio_codec_name = "AAC";
                    
                    var frameSizes = {
                        "tiny":  [  192,  144 ],
                        "small": [  320,  240 ],
                        "iphone":[  480,  320 ],
                        "sdef":  [  640,  480 ],
                        "idef":  [ 1280,  720 ],
                        "hdef":  [ 1920, 1080 ]
                    };
                    
                    var deviceFrameSizeMap = {
                        //         0            1         2           3           4
                        "All Apple Devices":
                        [
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ],   // mp4 && for iPod
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ],   // mp4 && for TV
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ],   // h.264 && for iPod
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ]    // h.264 && for TV
                        ], 
                        "iPod":
                        [
                            [   "tiny",     "small",    "small",    "small",    "small" ],  // mp4 && for iPod
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ],   // mp4 && for TV
                            [   "tiny",     "small",    "small",    "small",    "small" ],  // h.264 && for iPod
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ]    // h.264 && for TV
                        ], 
                        "iPhone":
                        [
                            [   "tiny",     "small",    "iphone",   "iphone",   "iphone" ], // mp4 && for iPod
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ],   // mp4 && for TV
                            [   "tiny",     "small",    "iphone",   "iphone",   "iphone" ], // h.264 && for iPod
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ]    // h.264 && for TV
                        ], 
                        "iPod touch":
                        [
                            [   "tiny",     "small",    "iphone",   "iphone",   "iphone" ], // mp4 && for iPod
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ],   // mp4 && for TV
                            [   "tiny",     "small",    "iphone",   "iphone",   "iphone" ], // h.264 && for iPod
                            [   "small",    "iphone",   "sdef",     "sdef",     "sdef" ]    // h.264 && for TV
                        ], 
                        "1st Gen Apple TV":
                        [
                            [   "sdef",     "sdef",     "sdef",     "sdef",     "sdef" ],   // mp4 && for iPod
                            [   "sdef",     "sdef",     "sdef",     "sdef",     "sdef" ],   // mp4 && for TV
                            [   "idef",     "idef",     "idef",     "idef",     "idef" ],   // h.264 && for iPod
                            [   "idef",     "idef",     "idef",     "idef",     "idef" ]    // h.264 && for TV
                        ],
                        "2nd Gen Apple TV":
                        [
                            [   "sdef",     "sdef",     "sdef",     "sdef",     "sdef" ],   // mp4 && for iPod
                            [   "sdef",     "sdef",     "sdef",     "sdef",     "sdef" ],   // mp4 && for TV
                            [   "idef",     "idef",     "idef",     "idef",     "idef" ],   // h.264 && for iPod
                            [   "idef",     "idef",     "idef",     "idef",     "idef" ]    // h.264 && for TV
                        ]
                    };
                    
                    var bitrateQualityMap = {
                        //                          mp4                                    h.264
                        "All Apple Devices":
                            [ [ 300,  450,  600, 1000, 1800, 2500 ], [ 300,  450,  600, 1000, 1200, 1500 ] ], 
                        "iPod":
                            [ [ 300,  450,  300,  700, 1500, 2500 ], [ 300,  450,  300,  700, 1000, 1500 ] ], 
                        "iPhone":
                            [ [  60,  150,  300,  700, 1500, 2500 ], [  60,  150,  300,  700, 1000, 1500 ] ], 
                        "iPod touch":
                            [ [ 300,  450,  300,  700, 1500, 2500 ], [ 300,  450,  300,  700, 1000, 1500 ] ], 
                        "1st Gen Apple TV":
                            [ [ 500, 1000, 1500, 2000, 2500, 3000 ], [ 500, 1000, 1500, 2500, 3750, 5000 ] ],
                        "2nd Gen Apple TV":
                            [ [ 500, 1000, 1500, 2000, 2500, 3000 ], [ 500, 1000, 1500, 2500, 3750, 5000 ] ]
                    };
                    
                    var audioQualityMap = {
                        //                          0           1           2           3           4
                        "All Apple Devices":    [   "low",      "high",     "high",     "high",     "high" ],
                        "iPod":                 [   "low",      "high",     "high",     "high",     "high" ],
                        "iPhone":               [   "low",      "medium",   "high",     "high",     "high" ],
                        "iPod touch":           [   "low",      "high",     "high",     "high",     "high" ],
                        "1st Gen Apple TV":     [   "high",     "high",     "high",     "high",     "high" ],
                        "2nd Gen Apple TV":     [   "high",     "high",     "high",     "high",     "high" ]
                    };
                    
                    var levelMap = {
                        //                          0   1   2   3   4
                        "All Apple Devices":    [   20, 30, 30, 30, 30 ],
                        "iPod":                 [   20, 30, 30, 30, 30 ],
                        "iPhone":               [   20, 30, 30, 30, 30 ],
                        "iPod touch":           [   20, 30, 30, 30, 30 ],
                        "1st Gen Apple TV":     [   31, 31, 31, 31, 31 ],
                        "2nd Gen Apple TV":     [   31, 31, 31, 31, 31 ]
                    };
                    
                    var title = params.title;
                    var qualityStop = number(params.quality_stop);
                    var quality = number(params.quality);
                    var h264 = bool(params.h264);
                    var forTV = bool(params.forTV);
                    var requestedFrameWidth = 0;
                    var requestedFrameHeight = 0;
                                        
                    // set frame rate
                    setVideoFrameRate(title != "1st Gen Apple TV" && title != "2nd Gen Apple TV");
                        
                    // set bitrate
                    var bitrateMin = bitrateQualityMap[title][h264 ? 1 : 0][qualityStop] * 1000;
                    var bitrateMax = bitrateQualityMap[title][h264 ? 1 : 0][qualityStop+1] * 1000;
                    setVideoBitrate(bitrateMin, bitrateMax);
                    
                    // set frame size
                    var index = (h264 ? 2 : 0) + (forTV ? 1 : 0);
                    var sizeString = deviceFrameSizeMap[title][index][qualityStop];
                    requestedFrameWidth = frameSizes[sizeString][0];
                    requestedFrameHeight = frameSizes[sizeString][1];
                    
                    setVideoSize(requestedFrameWidth, requestedFrameHeight);
                    
                    // Set the aspect ratio
                    params.ffmpeg_video_aspect_x = params.output_video_width;
                    params.ffmpeg_video_aspect_y = params.output_video_height;

                    // set audio quality
                    setAudioParams(audioQualityMap[title][qualityStop]);
                        
                    // The level is not necessarily accurate
                    params.output_video_profile_name = (title != "2nd Gen Apple TV") ? "baseline" : "main";
                    params.output_video_level_name = levelMap[title][qualityStop];
                    
                    // Generate the recipe
                    setRecipe();
                    ]]>
                </script>
            </common_device>
            <!-- All Apple Devices -->
            <device title="All Apple Devices" icon="itunesfile">
                 <checkbox which="0" title="H.264 Video">
                    <checked_item>
                        <param id="h264" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="h264" value="false" />
                    </unchecked_item>
                </checkbox>
            </device>
            
            <!-- iPod -->
            <device title="iPod" icon="ipod">
                <checkbox which="0" title="H.264 Video">
                    <checked_item>
                        <param id="h264" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="h264" value="false" />
                    </unchecked_item>
                </checkbox>
                <menu which="0" title="Best for:">
                    <menu_item title="iPod Screen">
                        <param id="forTV" value="false" />
                    </menu_item>
                    <menu_item title="TV Screen">
                        <param id="forTV" value="true" />
                    </menu_item>
                </menu>
            </device>
            
            <!-- iPhone -->
            <device title="iPhone" icon="iphone">
                <quality>
                    <quality_stop title="EDGE" />
                    <quality_stop title="3G" />
                    <quality_stop title="WiFi" />
                    <quality_stop title="High" />
                    <quality_stop title="Go Nuts" />
                </quality>
                <checkbox which="0" title="H.264 Video">
                    <checked_item>
                        <param id="h264" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="h264" value="false" />
                    </unchecked_item>
                </checkbox>
                <menu which="0" title="Best for:">
                    <menu_item title="iPod Screen">
                        <param id="forTV" value="false" />
                    </menu_item>
                    <menu_item title="TV Screen">
                        <param id="forTV" value="true" />
                    </menu_item>
                </menu>
            </device>
            
            <!-- iPod touch -->
            <device title="iPod touch" icon="iphone">
                <quality>
                    <quality_stop title="Tiny" />
                    <quality_stop title="Low" />
                    <quality_stop title="WiFi" />
                    <quality_stop title="High" />
                    <quality_stop title="Go Nuts" />
                </quality>
                <checkbox which="0" title="H.264 Video">
                    <checked_item>
                        <param id="h264" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="h264" value="false" />
                    </unchecked_item>
                </checkbox>
                <menu which="0" title="Best for:">
                    <menu_item title="iPod Screen">
                        <param id="forTV" value="false" />
                    </menu_item>
                    <menu_item title="TV Screen">
                        <param id="forTV" value="true" />
                    </menu_item>
                </menu>
             </device>
            
            <!-- First Gen Apple TV -->
            <device title="1st Gen Apple TV" icon="appletv">
                <menu which="0" title="Format Limits:">
                    <menu_item title="1024x720@24fps">
                        <param id="apple_tv_format_limit" value="24fps" />
                    </menu_item>
                    <menu_item title="960x540@30fps">
                        <param id="apple_tv_format_limit" value="30fps" />
                    </menu_item>
                </menu>
                <checkbox which="0" title="H.264 Video">
                    <checked_item>
                        <param id="h264" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="h264" value="false" />
                    </unchecked_item>
                </checkbox>
                <checkbox which="1" title="Keep Surround Track" enabled="false">
                    <checked_item>
                        <param id="keep_surround_track" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="keep_surround_track" value="false" />
                    </unchecked_item>
                </checkbox>
            </device>

            <!-- Second Gen Apple TV -->
            <device title="2nd Gen Apple TV" icon="appletv2">
                <param id="output_video_profile_name" value="main" />
                 <checkbox which="0" title="H.264 Video">
                    <checked_item>
                        <param id="h264" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="h264" value="false" />
                    </unchecked_item>
                </checkbox>
                <checkbox which="1" title="Keep Surround Track" enabled="false">
                    <checked_item>
                        <param id="keep_surround_track" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="keep_surround_track" value="false" />
                    </unchecked_item>
                </checkbox>
            </device>
         </device_group>

        <!--
        
            Video Formats
            
        -->
        <device_group title="Video Formats">
            <common_device>
                <param id="h264" value="false" />
                <param id="width320" value="false" />
                <script>
                    <![CDATA[
                            
                    //
                    // Video Formats -
                    //
                    // var bitrateQualityMap = {
                    //     "AVI":                  [ [  200,  500, 1500, 2500,  3800, 4000 ] /* !320  */, [ 300,  350,  400,  500,  600,  800 ] ] /* 320  */,
                    //     "MP4":                  [ [  300,  500, 1500, 2500,  4500,30000 ] /* !h264 */, [ 200,  500, 1100, 2000, 3500,20000 ] ] /* h264 */,
                    //     "QuickTime":            [ [  300,  500, 1500, 2500,  4500,30000 ] /* !h264 */, [ 200,  500, 1100, 2000, 3500,20000 ] ] /* h264 */,
                    //     "WMV":                  [ [  200,  500, 1500, 2500,  3500, 5760 ] /* !320  */, [ 300,  350,  400,  500,  600,  800 ] ] /* 320  */,
                    //     "Flash":                [ [  200, 1440, 1975, 2880,  3500, 5760 ] /* !320  */, [ 300,  350,  400,  500,  600,  800 ] ] /* 320  */,
                    //     "MPEG":                 [ [ 1000, 2304, 3456, 4937,  7000,11520 ] /* !ntsc */, [ 300,  320,  439,  640,  900, 1280 ] ] /* ntsc */,
                    //     "DV":                   [ [ 1000, 2304, 3456, 4937,  7000,11520 ] /* !ntsc */, [ 300,  320,  439,  640,  900, 1280 ] ] /* ntsc */
                    // };

                    // Video sizes, 0 means actual size
                    var generalVideoSize = [ [ 240, 180 ], [ 640, 480 ], [ 1024, 768 ], [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ];
                    
                    // Bitrate multipliers - these are multiplied by the total pixels per frame (width x height) to get the final bitrate
                    var generalMpeg4BitrateMultiplier = [ 1.5, 2.5, 3.5, 5, 7, 10 ];
                    var generalH264BitrateMultiplier = [ 0.5, 1, 1.5, 2, 4, 8 ];
                    
                    var qminMap = {
                        //                          0   1   2   3   4
                        "AVI":                  [    9,  7,  5,  3,  2 ],
                        "MP4":                  [    8,  7,  5,  3,  0 ],
                        "WMV":                  [    9,  8,  7,  6,  3 ],
                        "MPEG":                 [    5,  7,  5,  3,  0 ],
                        "Flash":                [    8,  7,  5,  3,  2 ]
                    };
                    
                    var mpegbitrateQualityMap = {
                        "none":                   [ 1382, 2304, 3456, 4937, 7000,11520 ],
                        "vcd":                    [ 0, 0, 0, 0, 0, 0 ], // indicates no bitrate should be set
                        "svcd":                 [ [  922, 1536, 2304, 3291,  5000, 7680 ], [ 1106,  1843,  2765,  3950, 6000, 9216 ] ],
                        "cvd":                  [ [  676, 1126, 1690, 2414,  3500, 5632 ], [  811,  1352,  2028,  2896, 4000, 6758 ] ],
                        "tivo":                   [  676, 1536, 2611, 3730,  7000, 11520 ],
                        "ts":                     [  676, 1126, 1690, 2414,  3500, 5632  ],
                        "vob":                    [  676, 1126, 1690, 2414,  3500, 5632  ],
                        "720":                    [  18500, 18500, 18500, 18500,  18500, 18500 ],
                        "1080":                   [  18500, 18500, 18500, 18500,  18500, 18500 ]
                    };
                    
                    // Values are between ratios of 1.2 - 1.5 - 1.9 - 2.5 - > 2.5
                    var tivoVideoSize = [
                        [ [ 352, 480 ], [ 352, 352 ], [ 352, 272 ], [ 352, 480 ] ], // Quality 0
                        [ [ 480, 480 ], [ 480, 352 ], [ 480, 272 ], [ 480, 480 ] ], // Quality 1
                        [ [ 544, 480 ], [ 544, 352 ], [ 544, 272 ], [ 544, 480 ] ], // Quality 2
                        [ [ 544, 480 ], [ 544, 352 ], [ 544, 272 ], [ 544, 480 ] ], // Quality 3
                        [ [ 720, 480 ], [ 720, 352 ], [ 720, 272 ], [ 720, 480 ] ], // Quality 4
                        [ [ 720, 480 ], [ 720, 352 ], [ 720, 272 ], [ 720, 480 ] ]  // Quality 5
                    ];
                    
                    // Values are between ratios of 1.2 - 1.5 - 1.9 - 2.5 - > 2.5
                    // First value in set is padtop, second is padbottom
                    var tivoVideoPadding = [ [ -1, -1 ], [ 64, 64 ], [ 96, 112 ], [ -1, -1 ] ];
                    
                    var qualityStop = number(params.quality_stop);
                    var quality = number(params.quality);
                    var h264 = bool(params.h264);
                    var forTV = bool(params.forTV);
                    var ntsc = bool(params.ntsc);
                    var mpeg2 = bool(params.mpeg2);
                    var requestedFrameWidth = 0;
                    var requestedFrameHeight = 0;
                    
                    setVideoFrameRate(params.title != "DV");
                    
                    // Init qmin
                    if (params.title in qminMap)
                        params.ffmpeg_option_qmin = qminMap[params.title][qualityStop];
                
                    // Init width and height
                    if (bool(params.width320))
                        requestedFrameWidth = 320;
                    else {
                        requestedFrameWidth = generalVideoSize[qualityStop][0];
                        requestedFrameHeight = generalVideoSize[qualityStop][1];
                    }

                    if (params.title != "DV")
                        setVideoSize(requestedFrameWidth, requestedFrameHeight);
                    
                    // Init bitrate
                    // Bitrate is width * height * bitrate multiplier * (extra bitrate multiplier for small sizes)
                    var bitrateMultTable = h264 ? generalH264BitrateMultiplier : generalMpeg4BitrateMultiplier;
                    var pixels = params.output_video_width * params.output_video_height;
                    
                    // extraMultiplier is a PWL curve with a value of 5 at 40K or below, 2 at 300K and 1 at 750K or above
                    var extraMultiplier;
                    if (pixels > 750000)
                        extraMultiplier = 1;
                    else if (pixels > 300000)
                        extraMultiplier = 2 - (pixels - 300000) / (750000 - 300000);
                    else if (pixels > 40000)
                        extraMultiplier = 5 - (pixels - 40000) / (300000 - 40000) * 3;
                    else
                        extraMultiplier = 5;
                        
                    var bitrateMin = pixels * bitrateMultTable[qualityStop] * extraMultiplier;
                    var bitrateMax = pixels * bitrateMultTable[qualityStop+1] * extraMultiplier;
                    setVideoBitrate(bitrateMin, bitrateMax);
                    
                    switch (params.title) {
                        case "MP4":
                            //params.ffmpeg_option_maxrate = "600k";
                            if (qualityStop == 4)
                                params.ffmpeg_option_qmin = "";
                            break;
                        case "MPEG":
                            var bitrateMin = mpegbitrateQualityMap[params.profile][qualityStop] * 1000;
                            var bitrateMax = mpegbitrateQualityMap[params.profile][qualityStop+1] * 1000;
                            setVideoBitrate(bitrateMin, bitrateMax);
                            
                            switch(params.profile) {
                                case "vcd":
                                    params.ffmpeg_video_aspect_x = 4;
                                    params.ffmpeg_video_aspect_y = 3;
                                    
                                    if (params.input_video_aspect >= 1.2 && params.input_video_aspect <= 1.5) {
                                        requestedFrameWidth = 352;
                                        requestedFrameHeight = ntsc ? 240 : 288;
                                    }
                                    else if (params.input_video_aspect >= 1.6 && params.input_video_aspect <= 1.9) {
                                        params.ffmpeg_option_padtop = ntsc ? 32 : 48;
                                        params.ffmpeg_option_padbottom = ntsc ? 32 : 48;
                                        
                                        requestedFrameWidth = 352;
                                        requestedFrameHeight = ntsc ? 176 : 192;
                                    }
                                    else if (params.input_video_aspect >= 2 && params.input_video_aspect <= 2.5) {
                                        params.ffmpeg_option_padtop = ntsc ? 48 : 64;
                                        params.ffmpeg_option_padbottom = ntsc ? 48 : 64;
                                        requestedFrameWidth = 352;
                                        requestedFrameHeight = ntsc ? 144 : 160;
                                    }
                                    else {
                                        requestedFrameWidth = 352;
                                        requestedFrameHeight = 240;
                                    }
                                    break;
                                case "svcd":
                                    params.ffmpeg_video_aspect_x = 4;
                                    params.ffmpeg_video_aspect_y = 3;
                                    
                                    if (params.input_video_aspect >= 1.2 && params.input_video_aspect <= 1.5) {
                                        requestedFrameWidth = 480;
                                        requestedFrameHeight = ntsc ? 480 : 576;
                                    }
                                    else if (params.input_video_aspect >= 1.6 && params.input_video_aspect <= 1.9) {
                                        params.ffmpeg_option_padtop = 64;
                                        params.ffmpeg_option_padbottom = 64;
                                        requestedFrameWidth = 480;
                                        requestedFrameHeight = ntsc ? 352 : 448;
                                    }
                                    else if (params.input_video_aspect >= 2 && params.input_video_aspect <= 2.5) {
                                        params.ffmpeg_option_padtop = ntsc ? 96 : 112;
                                        params.ffmpeg_option_padbottom = ntsc ? 96 : 112;
                                        requestedFrameWidth = 480;
                                        requestedFrameHeight = ntsc ? 272 : 352;
                                    }
                                    else {
                                        requestedFrameWidth = 480;
                                        requestedFrameHeight = ntsc ? 480 : 576;
                                    }
                                    break;
                                case "cvd":
                                    params.ffmpeg_video_aspect_x = 4;
                                    params.ffmpeg_video_aspect_y = 3;
                                    
                                    if (params.input_video_aspect >= 1.2 && params.input_video_aspect <= 1.5) {
                                        requestedFrameWidth = 352;
                                        requestedFrameHeight = ntsc ? 480 : 576;
                                    }
                                    else if (params.input_video_aspect >= 1.6 && params.input_video_aspect <= 1.9) {
                                        params.ffmpeg_option_padtop = 64;
                                        params.ffmpeg_option_padbottom = 64;
                                        requestedFrameWidth = 352;
                                        requestedFrameHeight = ntsc ? 352 : 448;
                                    }
                                    else if (params.input_video_aspect >= 2 && params.input_video_aspect <= 2.5) {
                                        params.ffmpeg_option_padtop = ntsc ? 96 : 112;
                                        params.ffmpeg_option_padbottom = ntsc ? 96 : 112;
                                        requestedFrameWidth = 352;
                                        requestedFrameHeight = ntsc ? 272 : 352;
                                    }
                                    else{
                                        requestedFrameWidth = 352;
                                        requestedFrameHeight = ntsc ? 480 : 576;
                                    }
                                    break;
                                case "tivo":
                                    // Values are between ratios of 1.2 - 1.5 - 1.9 - 2.5 - > 2.5
                                    var index;
                                    if (params.input_video_aspect > 2.5)
                                        index = 0;
                                    else if (params.input_video_aspect > 2)
                                        index = 3;
                                    else if (params.input_video_aspect > 1.6)
                                        index = 2;
                                    else if (params.input_video_aspect > 1.2)
                                        index = 1;
                                    else
                                        index = 0;
                                    
                                    requestedFrameWidth = tivoVideoSize[qualityStop][index][0];
                                    requestedFrameHeight = tivoVideoSize[qualityStop][index][1];
                                    
                                    params.ffmpeg_option_padtop = tivoVideoPadding[index][0];
                                    if (params.ffmpeg_option_padtop < 0)
                                        params.ffmpeg_option_padtop = "";

                                    params.ffmpeg_option_padbottom = tivoVideoPadding[index][1];
                                    if (params.ffmpeg_option_padbottom < 0)
                                        params.ffmpeg_option_padbottom = "";
                                     break;
                                case "ts":
                                    params.ffmpeg_video_aspect_x = 4;
                                    params.ffmpeg_video_aspect_y = 3;
                                    requestedFrameWidth = 352;
                                    requestedFrameHeight = ntsc ? 480 : 576;
                                    break;
                                case "720":
                                case "1080":
                                    params.ffmpeg_video_aspect_x = 16;
                                    params.ffmpeg_video_aspect_y = 9;
                                    
                                    if (params.profile == "720") {
                                        requestedFrameWidth = 1280;
                                        requestedFrameHeight = 720;

                                        if (params.input_video_aspect >= 1.2 && params.input_video_aspect <= 1.5) {
                                            params.ffmpeg_option_padleft = 160;
                                            params.ffmpeg_option_padright = 160;
                                            requestedFrameWidth = 960;
                                        }
                                        else if (params.input_video_aspect >= 2 && params.input_video_aspect <= 2.5) {
                                            params.ffmpeg_option_padleft = 80;
                                            params.ffmpeg_option_padright = 80;
                                            requestedFrameHeight = 544;
                                        }
                                    }
                                    else {
                                        requestedFrameWidth = 1920;
                                        requestedFrameHeight = 1080;

                                        if (params.input_video_aspect >= 1.2 && params.input_video_aspect <= 1.5) {
                                            params.ffmpeg_option_padleft = 240;
                                            params.ffmpeg_option_padright = 240;
                                            requestedFrameWidth = 1440;
                                        }
                                        else if (params.input_video_aspect >= 2 && params.input_video_aspect <= 2.5) {
                                            params.ffmpeg_option_padleft = 128;
                                            params.ffmpeg_option_padright = 128;
                                            requestedFrameHeight = 816;
                                        }
                                    }
                                    break;
                            }
                            break;
                    }
                    
                    if (params.title != "DV")
                        setVideoSize(requestedFrameWidth, requestedFrameHeight);
                    
                    // Generate the recipe
                    setRecipe();

                    ]]>
                </script>
            </common_device>
            <!-- AVI -->
            <device title="AVI" icon="file" enabled="true">
                <script>
                    <![CDATA[
                        setAudioParams((qualityStop == 0) ? "low" : (qualityStop == 1) ? "medium" : "cd");
                        setRecipe();
                    ]]>
                </script>
                <checkbox which="0" title="320 Pixels Wide">
                    <checked_item>
                        <param id="width320" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="width320" value="false" />
                    </unchecked_item>
                </checkbox>
                <param id="output_format_name" value="AVI" />
                <param id="output_video_codec_name" value="MPEG-4" />
                <param id="output_audio_codec_name" value="MP3" />
                <param id="video_suffix" value="avi" />
                <param id="ffmpeg_option_g" value="200" />
                <!-- <param id="ffmpeg_option_vtag" value="DX50" /> -->
            </device>
            
            <!-- MP4 -->
            <device title="MP4" icon="file" enabled="true">
                <script>
                    <![CDATA[
                        setAudioParams("default");
                        setRecipe();
                    ]]>
                </script>
                <checkbox which="0" title="H.264 Video">
                    <checked_item>
                        <param id="output_video_codec_name" value="H.264" />
                        <param id="h264" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="output_video_codec_name" value="MPEG-4" />
                        <param id="extras" value="" />
                        <param id="h264" value="false" />
                    </unchecked_item>
                </checkbox>
                <param id="output_format_name" value="MPEG-4" />
                <param id="output_audio_codec_name" value="MP3" />
            </device>
            
            <!-- QuickTime -->
            <device title="QuickTime" icon="file" enabled="true">
                <script>
                    <![CDATA[
                        setAudioParams("default");
                        setRecipe();
                    ]]>
                </script>
                <param id="output_format_name" value="Quicktime" />
                <param id="video_suffix" value="mov" />
                <param id="output_audio_codec_name" value="AAC" />
                
                <checkbox which="0" title="H.264 Video">
                    <checked_item>
                        <param id="output_video_codec_name" value="H.264" />
                        <param id="h264" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="output_video_codec_name" value="MPEG-4" />
                        <param id="h264" value="false" />
                    </unchecked_item>
                </checkbox>
                <menu which="0" title="Best for:">
                    <menu_item title="iPhone Screen">
                        <param id="output_video_codec_name" value="H.264" />
                    </menu_item>
                    <menu_item title="TV Screen">
                        <param id="output_video_codec_name" value="MPEG-4" />
                    </menu_item>
                </menu>
            </device>
            
            <!-- WMV -->
            <device title="WMV" icon="wma" enabled="true">
                <checkbox which="0" title="320 Pixels Wide">
                    <checked_item>
                        <param id="width320" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="width320" value="false" />
                    </unchecked_item>
                </checkbox>
                <param id="num_cpus" value="1" /> <!-- WMV encoding fails if num_cpus is not 1 -->
                <param id="ffmpeg_option_pix_fmt" value="yuv420p" />
                <param id="ffmpeg_option_qmin" value="7" />
                <param id="ffmpeg_option_g" value="15" />
                <param id="extras" value="" />
                <param id="video_suffix" value="wmv" />
                <param id="output_format_name" value="WMV" />
                <param id="output_video_codec_name" value="WMV" />
                <param id="output_audio_codec_name" value="WMA" />
                <script>
                    <![CDATA[
                        setAudioParams((qualityStop == 0) ? "low" : (qualityStop == 1) ? "medium" : "cd");
                        setRecipe();
                    ]]>
                </script>
            </device>

            <!-- Flash -->
            <device title="Flash" icon="flash" enabled="true">
                <script>
                    <![CDATA[
                        setAudioParams((qualityStop == 0) ? "low" : (qualityStop == 1) ? "medium" : "cd");
                        setRecipe();
                    ]]>
                </script>
                <checkbox which="1" title="Raw .flv Format">
                    <checked_item>
                        <param id="video_suffix" value="flv" />
                        <param id="output_format_name" value="FLV" />
                    </checked_item>
                    <unchecked_item>
                        <param id="video_suffix" value="swf" />
                        <param id="output_format_name" value="SWF" />
                    </unchecked_item>
                </checkbox>
                <checkbox which="0" title="320 Pixels Wide">
                    <checked_item>
                        <param id="width320" value="true" />
                    </checked_item>
                    <unchecked_item>
                        <param id="width320" value="false" />
                    </unchecked_item>
                </checkbox>
                <param id="num_cpus" value="1" /> <!-- Flash encoding fails if num_cpus is not 1 -->
                <param id="output_video_codec_name" value="FLV" />
                <param id="output_audio_codec_name" value="MP3" />
            </device>
            
            <!-- MPEG -->
            <device title="MPEG" icon="file" enabled="true">
                <script>
                    <![CDATA[
                    function setMPEG1Params()
                    {
                        var mpegMaxrateMap = [ 2764,  4608,  6912, 9874,  23040 ];                    
                        params.ffmpeg_option_ratemax = mpegMaxrateMap[params.quality_stop];
                        setAudioParams("default");
                        setRecipe();
                    }
                    ]]>
                </script>
                 <menu which="0" title="Format:">
                    <menu_item title="NTSC">
                        <param id="ntsc" value="true" />
                        <param id="output_video_frame_rate" value="29.97" />
                    </menu_item>
                    <menu_item title="PAL">
                        <param id="ntsc" value="false" />
                        <param id="output_video_frame_rate" value="25" />
                    </menu_item>
                </menu>
                <menu which="1" title="Profile:">
                    <menu_item title="Generic MPEG-1">
                        <script>
                            <![CDATA[
                            setMPEG1Params();
                            setRecipe();
                            ]]>
                        </script>
                        <param id="profile" value="none" />
                        <param id="output_format_name" value="MPEG-1" />
                        <param id="output_video_codec_name" value="MPEG-1" />
                    </menu_item>
                    <menu_item title="Generic MPEG-2">
                        <param id="profile" value="none" />
                    </menu_item>
                    <menu_item title="VCD">
                        <script> <![CDATA[ 
                            setMPEG1Params();
                            params.ffmpeg_option_target = params.ntsc ? "ntsc-vcd" : "pal-vcd";
                            setRecipe();
                        ]]> </script>
                        <param id="profile" value="vcd" />
                        <param id="ffmpeg_option_qmin" value="5" />
                        <param id="ffmpeg_option_bf" value="2" />
                        <param id="output_format_name" value="MPEG-1" />
                        <param id="output_video_codec_name" value="MPEG-1" />
                    </menu_item>
                    <menu_item title="SVCD">
                        <param id="profile" value="svcd" />
                    </menu_item>
                    <menu_item title="CVD">
                        <param id="profile" value="cvd" />
                    </menu_item>
                    <menu_item title="TiVo">
                        <param id="profile" value="tivo" />
                    </menu_item>
                    <menu_item title="VOB">
                        <script>
                        <![CDATA[
                            setAudioParams("high");
                            params.ffmpeg_option_target = params.ntsc ? "ntsc-vcd" : "pal-vcd";
                            setRecipe();
                        ]]>
                        </script>
                        <param id="profile" value="vob" />
                    </menu_item>
                    <menu_item title="Transport Stream">
                        <script>
                        <![CDATA[
                            setAudioParams("high");
                            setRecipe();
                        ]]>
                        </script>
                        <param id="profile" value="ts" />
                        <param id="output_audio_codec_name" value="AC3" />
                    </menu_item>
                    <menu_item title="720p">
                        <script>
                        <![CDATA[
                            setAudioParams("hq");
                            setRecipe();
                        ]]>
                        </script>
                        <param id="profile" value="720" />
                        <param id="video_suffix" value="m2t" />
                        <param id="output_audio_codec_name" value="AC3" />
                    </menu_item>
                    <menu_item title="1080i">
                        <script>
                        <![CDATA[
                            setAudioParams("hq");
                            setRecipe();
                        ]]>
                        </script>
                        <param id="profile" value="1080" />
                        <param id="video_suffix" value="m2t" />
                        <param id="output_audio_codec_name" value="AC3" />
                    </menu_item>
                </menu>
                <param id="video_suffix" value="mpg" />
                <param id="output_format_name" value="MPEG-2" />
                <param id="output_video_codec_name" value="MPEG-2" />
                <param id="output_audio_codec_name" value="MP2" />
            </device>
            
            <!-- DV -->
            <device title="DV" icon="dv" enabled="true">
                <param id="video_suffix" value="dv" />
                <param id="output_format_name" value="Digital Video" />
                <param id="output_video_codec_name" value="Digital Video" />
                <param id="output_audio_codec_name" value="PCM" />
                <param id="output_audio_channels" value="2" />
                <param id="output_audio_quality" value="High" />

                <checkbox which="0" title="Force Anamorphic 16:9" enabled="false">
                    <checked_item>
                    </checked_item>
                    <unchecked_item>
                    </unchecked_item>
                </checkbox>
                <checkbox which="1" title="Ready for Final Cut">
                    <checked_item>
                        <param id="forceFormat" value="-f mov" />
                    </checked_item>
                    <unchecked_item>
                        <param id="forceFormat" value="" />
                    </unchecked_item>
                </checkbox>
                <menu which="0" title="Format:">
                    <menu_item title="NTSC">
                        <param id="output_video_frame_rate" value="29.97" />
                        <param id="output_video_width" value="720" />
                        <param id="output_video_height" value="480" />
                        <param id="ffmpeg_video_aspect_x" value="3" />
                        <param id="ffmpeg_video_aspect_y" value="2" />
                        <param id="ffmpeg_option_pix_fmt" value="yuv411p" />
                    </menu_item>
                    <menu_item title="PAL">
                        <param id="output_video_frame_rate" value="25" />
                        <param id="output_video_width" value="720" />
                        <param id="output_video_height" value="576" />
                        <param id="aspect" value="" />
                        <param id="ffmpeg_option_pix_fmt" value="yuv420p" />
                    </menu_item>
                </menu>
                <quality>
                    <quality_stop title="Tiny" />
                </quality>
                <script>
                <![CDATA[
                    setRecipe();
                ]]>
                </script>
            </device>
        </device_group>
        <!--
        
            Other Conversions
            
        -->
        <device_group title="Other Conversions">
            <common_device>
                 <script>
                    <![CDATA[
                    ]]>
                </script>
            </common_device>
            
            <!-- DVD -->
            <device title="Create a DVD Image" icon="cd" enabled="false">
               <checkbox which="0" title="Dual layer">
                    <checked_item>
                        <param id="output_video_codec_name" value="H.264" />
                    </checked_item>
                    <unchecked_item>
                        <param id="output_video_codec_name" value="MPEG-4" />
                    </unchecked_item>
                </checkbox>
                <checkbox which="1" title="Add chapter for each file">
                    <checked_item>
                        <param id="output_video_codec_name" value="H.264" />
                    </checked_item>
                    <unchecked_item>
                        <param id="output_video_codec_name" value="MPEG-4" />
                    </unchecked_item>
                </checkbox>
                <menu which="0" title="Format:">
                    <menu_item title="NTSC">
                        <param id="output_video_codec_name" value="H.264" />
                    </menu_item>
                    <menu_item title="PAL">
                        <param id="output_video_codec_name" value="MPEG-4" />
                    </menu_item>
                </menu>
                <menu which="1" title="Create:">
                    <menu_item title="Burnable Image">
                        <param id="output_video_codec_name" value="H.264" />
                    </menu_item>
                    <menu_item title="VIDEO_TS Folder">
                        <param id="output_video_codec_name" value="MPEG-4" />
                    </menu_item>
                    <menu_item title="Plain .VOB Files">
                        <param id="output_video_codec_name" value="MPEG-4" />
                    </menu_item>
                </menu>
            </device>
        </device_group>
    </devices>
</videomonkey>

        